name: Deploy Bot

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".github/workflows/test-connection.yml"
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild without cache"
        required: false
        default: false
        type: boolean

env:
  PROJECT_PATH: /home/${{ secrets.SERVER_USER }}/ReflectaBot

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Deployment Info
        run: |
          echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          command_timeout: 10m
          script: |
            set -e

            echo "Starting deployment at $(date)"

            cd ${{ env.PROJECT_PATH }}
            echo "Current directory: $(pwd)"

            git fetch origin
            LOCAL=$(git rev-parse HEAD)
            REMOTE=$(git rev-parse origin/main)

            if [ "$LOCAL" = "$REMOTE" ]; then
              echo "No changes detected, checking if containers are running..."
              if docker-compose ps | grep -q "Up"; then
                echo "Containers already running with latest code, skipping deployment"
                docker-compose ps
                exit 0
              fi
            fi

            echo "Pulling latest changes..."
            git pull origin main

            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found"
              exit 1
            fi

            echo "Stopping containers..."
            docker-compose down

            echo "Checking what changed..."
            CHANGED_FILES=$(git diff --name-only HEAD~1)
            echo "Changed files: $CHANGED_FILES"

            if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
              echo "Force rebuilding without cache..."
              docker-compose build --no-cache
              docker-compose up -d
            elif echo "$CHANGED_FILES" | grep -E '\.(cs|csproj|Dockerfile|docker-compose\.yml)$'; then
              echo "Source code changed, rebuilding..."
              docker-compose up -d --build
            else
              echo "Only docs/config changed, restarting without rebuild..."
              docker-compose up -d
            fi

            echo "Waiting for containers to start..."
            sleep 15

            echo "Container status:"
            docker-compose ps

            echo "Testing endpoint..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -d '{"message":{"chat":{"id":123},"text":"deploy test","from":{"first_name":"Deploy"}}}' \
              --connect-timeout 5 --max-time 10 \
              http://localhost:5211/api/update || echo "000")

            echo "Endpoint test: HTTP $HTTP_STATUS"

            echo "Cleaning up unused resources..."
            docker image prune -f --filter "dangling=true"

            echo "Deployment completed at $(date)"

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "ReflectaBot has been deployed and is running." >> $GITHUB_STEP_SUMMARY
          else
            echo "## Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for error details." >> $GITHUB_STEP_SUMMARY
          fi
